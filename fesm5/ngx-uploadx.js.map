{"version":3,"file":"ngx-uploadx.js.map","sources":["ng://ngx-uploadx/lib/retry-handler.ts","ng://ngx-uploadx/lib/ajax.ts","ng://ngx-uploadx/lib/canceler.ts","ng://ngx-uploadx/lib/store.ts","ng://ngx-uploadx/lib/utils.ts","ng://ngx-uploadx/lib/uploader.ts","ng://ngx-uploadx/lib/tus.ts","ng://ngx-uploadx/lib/uploaderx.ts","ng://ngx-uploadx/lib/options.ts","ng://ngx-uploadx/lib/id.service.ts","ng://ngx-uploadx/lib/uploadx.service.ts","ng://ngx-uploadx/lib/uploadx.directive.ts","ng://ngx-uploadx/lib/uploadx-drop.directive.ts","ng://ngx-uploadx/lib/uploadx.module.ts"],"sourcesContent":["export enum ErrorType {\n  NotFound,\n  Auth,\n  Retryable,\n  Fatal\n}\n\nexport interface RetryConfig {\n  /** Maximum number of retry attempts */\n  maxAttempts?: number;\n  /** Upload not exist status codes */\n  shouldRestartCodes?: number[];\n  /** Bad token? status codes */\n  authErrorCodes?: number[];\n  /** Retryable 4xx status codes */\n  shouldRetryCodes?: number[];\n  minDelay?: number;\n  maxDelay?: number;\n}\n\nconst defaultRetryConfig: Required<RetryConfig> = {\n  maxAttempts: 8,\n  shouldRestartCodes: [404, 410],\n  authErrorCodes: [401],\n  shouldRetryCodes: [423, 429],\n  minDelay: 500,\n  maxDelay: 50000\n};\n\n/**\n * Retryable ErrorHandler\n */\nexport class RetryHandler {\n  public attempts = 0;\n  config: Required<RetryConfig>;\n  cancel: () => void = () => {};\n\n  constructor(configOptions: RetryConfig = {}) {\n    this.config = Object.assign({}, defaultRetryConfig, configOptions);\n  }\n\n  kind(code: number): ErrorType {\n    this.attempts++;\n    if (this.attempts > this.config.maxAttempts) {\n      return ErrorType.Fatal;\n    }\n    if (this.config.authErrorCodes.indexOf(code) !== -1) {\n      return ErrorType.Auth;\n    }\n    if (this.config.shouldRestartCodes.indexOf(code) !== -1) {\n      return ErrorType.NotFound;\n    }\n    if (code < 400 || code >= 500 || this.config.shouldRetryCodes.indexOf(code) !== -1) {\n      return ErrorType.Retryable;\n    }\n    return ErrorType.Fatal;\n  }\n\n  wait(): Promise<void> {\n    const ms =\n      Math.min(2 ** (this.attempts - 1) * this.config.minDelay, this.config.maxDelay) +\n      Math.floor(Math.random() * this.config.minDelay);\n    let id: ReturnType<typeof setTimeout>;\n    return new Promise(resolve => {\n      this.cancel = () => {\n        clearTimeout(id);\n        resolve();\n      };\n      id = setTimeout(this.cancel, ms);\n    });\n  }\n\n  reset(): void {\n    this.attempts = 0;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { RequestOptions } from './interfaces';\n\nexport interface AjaxRequestConfig extends RequestOptions {\n  // tslint:disable-next-line:no-any\n  [x: string]: any;\n\n  data?: BodyInit | null;\n  url: string;\n}\n\nexport interface AjaxResponse<T> {\n  data: T;\n  status: number;\n  headers: Record<string, string>;\n}\n\nexport interface Ajax {\n  request: <T = string>(config: AjaxRequestConfig) => Promise<AjaxResponse<T>>;\n}\n\nfunction createXhr(): XMLHttpRequest {\n  return new XMLHttpRequest();\n}\n\nfunction releaseXhr(xhr: unknown): void {\n  xhr = null;\n}\n\nexport class UploadxAjax {\n  constructor(private buildXhr: () => XMLHttpRequest) {}\n\n  request = <T = string>({\n    method = 'GET',\n    data = null,\n    headers = {},\n    url,\n    responseType,\n    canceler,\n    onUploadProgress,\n    withCredentials = false,\n    validateStatus = status => status < 400 && status >= 200\n  }: AjaxRequestConfig): Promise<AjaxResponse<T>> => {\n    const xhr = this.buildXhr();\n    canceler && (canceler.onCancel = () => xhr && xhr.readyState !== xhr.DONE && xhr.abort());\n    return new Promise((resolve, reject) => {\n      xhr.open(method, url, true);\n      withCredentials && (xhr.withCredentials = true);\n      responseType && (xhr.responseType = responseType);\n      responseType === 'json' && !headers.Accept && (headers.Accept = 'application/json');\n      Object.keys(headers).forEach(key => xhr.setRequestHeader(key, String(headers[key])));\n      xhr.upload.onprogress = onUploadProgress || null;\n      xhr.onerror = xhr.ontimeout = xhr.onabort = evt => {\n        releaseXhr(xhr);\n        return reject({ error: evt.type, url, method });\n      };\n      xhr.onload = () => {\n        const response = {\n          data: this.getResponseBody<T>(xhr, responseType === 'json'),\n          status: xhr.status,\n          headers: this.getResponseHeaders(xhr)\n        };\n        releaseXhr(xhr);\n        return validateStatus(response.status) ? resolve(response) : reject(response);\n      };\n      xhr.send(data);\n    });\n  };\n\n  getResponseHeaders(xhr: XMLHttpRequest): Record<string, string> {\n    const rows = xhr.getAllResponseHeaders().split(/[\\r\\n]+/);\n    return rows.reduce((headers: Record<string, string>, current) => {\n      const [name, value] = current.split(': ');\n      name && (headers[name.toLowerCase()] = value);\n      return headers;\n    }, {});\n  }\n\n  getResponseBody<T = string>(xhr: XMLHttpRequest, json?: boolean): T {\n    let body = 'response' in (xhr as XMLHttpRequest) ? xhr.response : xhr.responseText;\n    if (body && json && typeof body === 'string') {\n      try {\n        body = JSON.parse(body);\n      } catch {}\n    }\n    return body;\n  }\n}\n\nexport const UPLOADX_AJAX: InjectionToken<Ajax> = new InjectionToken('uploadx.ajax', {\n  factory: () => new UploadxAjax(createXhr),\n  providedIn: 'root'\n});\n","export class Canceler {\n  onCancel = () => {};\n\n  cancel(): void {\n    this.onCancel();\n    this.onCancel = () => {};\n  }\n}\n","class Store {\n  prefix = 'UPLOADX-V3.0-';\n\n  set(key: string, value: string): void {\n    localStorage.setItem(this.prefix + key, value);\n  }\n\n  get(key: string): string | null {\n    return localStorage.getItem(this.prefix + key);\n  }\n\n  delete(key: string): void {\n    localStorage.removeItem(this.prefix + key);\n  }\n}\n\nexport const store =\n  typeof window !== 'undefined' && 'localStorage' in window\n    ? new Store()\n    : new Map<string, string>();\n","// tslint:disable: no-bitwise\n\nimport { Primitive } from './interfaces';\n\nfunction safeMatch(base: string, re: RegExp): string {\n  return (base.match(re) || [])[0] || '';\n}\n\nexport function resolveUrl(url: string, base: string): string {\n  if (url.indexOf('https://') * url.indexOf('http://') === 0) {\n    return url;\n  }\n  if (url.indexOf('//') === 0) {\n    return safeMatch(base, /^(https?:)/) + url;\n  }\n  if (url.indexOf('/') === 0) {\n    return safeMatch(base, /^(?:https?:)?(?:\\/\\/)?([^\\/\\?]+)/) + url;\n  }\n  return safeMatch(base, /^(?:https?:)?(?:\\/\\/)?([^\\/\\?]+)?(.*\\/)/) + url;\n}\n\nexport function unfunc<T, V>(value: T | ((ref: V) => T), ref: V): T {\n  return value instanceof Function ? value(ref) : value;\n}\n\nexport const pick = <T, K extends keyof T>(obj: T, whitelist: K[]): Pick<T, K> => {\n  const result = {} as Pick<T, K>;\n  whitelist.forEach(key => (result[key] = obj[key]));\n  return result;\n};\n\nexport function isNumber(x?: number): x is number {\n  return x === Number(x);\n}\n\n/**\n * 32-bit FNV-1a hash function\n */\nexport function createHash(str: string): number {\n  let hash = 2166136261;\n  const len = str.length;\n  for (let i = 0; i < len; i++) {\n    hash ^= str.charCodeAt(i);\n    hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n  }\n  return hash >>> 0;\n}\n\nexport const b64 = {\n  encode: (str: string) =>\n    btoa(\n      encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (match, p1) =>\n        String.fromCharCode(Number.parseInt(p1, 16))\n      )\n    ),\n  decode: (str: string) =>\n    decodeURIComponent(\n      atob(str)\n        .split('')\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n        .join('')\n    ),\n  serialize: (obj: Record<string, Primitive | Primitive[]>) =>\n    Object.keys(obj)\n      .map(key => `${key} ${b64.encode(String(obj[key]))}`)\n      .toString(),\n\n  parse: (encoded: string) => {\n    const kvPairs = encoded.split(',').map(kv => kv.split(' '));\n    const decoded: Record<string, string> = Object.create(null);\n    for (const [key, value] of kvPairs) {\n      decoded[key] = b64.decode(value);\n    }\n    return decoded;\n  }\n};\n\n/**\n * Adaptive chunk size\n */\nexport class DynamicChunk {\n  /** Maximum chunk size in bytes */\n  static maxSize = Number.MAX_SAFE_INTEGER;\n  /** Minimum chunk size in bytes */\n  static minSize = 1024 * 256;\n  /** Initial chunk size in bytes */\n  static size = 4096 * 256;\n  static minChunkTime = 2;\n  static maxChunkTime = 8;\n\n  static scale(throughput: number): number {\n    const elapsedTime = DynamicChunk.size / throughput;\n    if (elapsedTime < DynamicChunk.minChunkTime) {\n      DynamicChunk.size = Math.min(DynamicChunk.maxSize, DynamicChunk.size * 2);\n    }\n    if (elapsedTime > DynamicChunk.maxChunkTime) {\n      DynamicChunk.size = Math.max(DynamicChunk.minSize, DynamicChunk.size / 2);\n    }\n    return DynamicChunk.size;\n  }\n}\n","import { Ajax, AjaxRequestConfig } from './ajax';\nimport { Canceler } from './canceler';\nimport {\n  AuthorizeRequest,\n  Metadata,\n  PreRequest,\n  RequestConfig,\n  RequestHeaders,\n  RequestOptions,\n  ResponseBody,\n  UploadAction,\n  UploaderOptions,\n  UploadState,\n  UploadStatus,\n  UploadxControlEvent\n} from './interfaces';\nimport { ErrorType, RetryHandler } from './retry-handler';\nimport { store } from './store';\nimport { DynamicChunk, isNumber, unfunc } from './utils';\n\nconst actionToStatusMap: { [K in UploadAction]: UploadStatus } = {\n  pause: 'paused',\n  upload: 'queue',\n  cancel: 'cancelled'\n};\n\n/**\n * Uploader Base Class\n */\nexport abstract class Uploader implements UploadState {\n  name: string;\n  readonly size: number;\n  readonly uploadId!: string;\n  response: ResponseBody = null;\n  responseStatus = 0;\n  responseHeaders: Record<string, string> = {};\n  progress!: number;\n  remaining!: number;\n  speed!: number;\n  /** Custom headers */\n  headers: RequestHeaders = {};\n  /** Metadata Object */\n  metadata: Metadata;\n  /** Upload endpoint */\n  endpoint = '/upload';\n  /** Chunk size in bytes */\n  chunkSize: number;\n  /** Auth token/tokenGetter */\n  token: UploadxControlEvent['token'];\n  /** Byte offset within the whole file */\n  offset? = 0;\n  /** Retries handler */\n  retry: RetryHandler;\n  canceler = new Canceler();\n  /** Set HttpRequest responseType */\n  protected responseType?: 'json' | 'text';\n  private readonly _authorize: AuthorizeRequest;\n  private readonly _prerequest: PreRequest;\n  private startTime!: number;\n  private _token!: string;\n  private _url = '';\n\n  get url(): string {\n    return this._url || store.get(this.uploadId) || '';\n  }\n\n  set url(value: string) {\n    this._url !== value && store.set(this.uploadId, value);\n    this._url = value;\n  }\n\n  private _status!: UploadStatus;\n\n  get status(): UploadStatus {\n    return this._status;\n  }\n\n  set status(s: UploadStatus) {\n    if (this._status === 'cancelled' || (this._status === 'complete' && s !== 'cancelled')) {\n      return;\n    }\n    if (s !== this._status) {\n      this.status === 'retry' && this.retry.cancel();\n      this._status = s;\n      s === 'paused' && this.abort();\n      ['cancelled', 'complete', 'error'].indexOf(s) !== -1 && this.cleanup();\n      s === 'cancelled' ? this.cancel() : this.stateChange(this);\n    }\n  }\n\n  constructor(\n    readonly file: File,\n    readonly options: Readonly<UploaderOptions>,\n    readonly stateChange: (evt: UploadState) => void,\n    readonly ajax: Ajax\n  ) {\n    this.retry = new RetryHandler(options.retryConfig);\n    this.name = file.name;\n    this.size = file.size;\n    this.metadata = {\n      name: file.name,\n      mimeType: file.type || 'application/octet-stream',\n      size: file.size,\n      lastModified:\n        file.lastModified || (file as File & { lastModifiedDate: Date }).lastModifiedDate.getTime()\n    };\n    this.chunkSize = options.chunkSize || this.size;\n    this._prerequest = options.prerequest || (req => req);\n    this._authorize = options.authorize || (req => req);\n    this.configure(options);\n  }\n\n  /**\n   * Configure uploader\n   */\n  configure({ metadata, headers, token, endpoint, action }: UploadxControlEvent): void {\n    endpoint && (this.endpoint = endpoint);\n    token && (this.token = token);\n    metadata && Object.assign(this.metadata, unfunc(metadata, this.file));\n    headers && Object.assign(this.headers, unfunc(headers, this.file));\n    action && (this.status = actionToStatusMap[action]);\n  }\n\n  /**\n   * Starts uploading\n   */\n  async upload(): Promise<void> {\n    this._status = 'uploading';\n    this.startTime = new Date().getTime();\n    await this.updateToken();\n    while (this.status === 'uploading' || this.status === 'retry') {\n      this.status = 'uploading';\n      try {\n        this.url = this.url || (await this.getFileUrl());\n        this.offset = isNumber(this.offset) ? await this.sendFileContent() : await this.getOffset();\n        this.retry.reset();\n        if (this.offset === this.size) {\n          this.remaining = 0;\n          this.progress = 100;\n          this.status = 'complete';\n        }\n      } catch (e) {\n        e instanceof Error && console.error(e);\n        if (this.status !== 'uploading') {\n          return;\n        }\n        switch (this.retry.kind(this.responseStatus)) {\n          case ErrorType.Fatal:\n            this.status = 'error';\n            return;\n          case ErrorType.NotFound:\n            this.url = '';\n            break;\n          case ErrorType.Auth:\n            await this.updateToken();\n            break;\n          default:\n            this.responseStatus >= 400 && (this.offset = undefined);\n            this.status = 'retry';\n            await this.retry.wait();\n        }\n      }\n    }\n  }\n\n  /**\n   * Performs http requests\n   */\n  async request(requestOptions: RequestOptions): Promise<void> {\n    this.responseStatus = 0;\n    this.response = null;\n    this.responseHeaders = {};\n    let req: RequestConfig = {\n      body: requestOptions.body || null,\n      canceler: this.canceler,\n      headers: { ...this.headers, ...requestOptions.headers },\n      method: requestOptions.method || 'GET',\n      url: requestOptions.url || this.url\n    };\n    req = await this._authorize(req, this._token);\n    const { body = null, headers, method, url = req.url } = (await this._prerequest(req)) || req;\n    const ajaxRequestConfig: AjaxRequestConfig = {\n      method,\n      headers: { ...req.headers, ...headers },\n      url,\n      data: body,\n      responseType: this.responseType,\n      withCredentials: !!this.options.withCredentials,\n      canceler: this.canceler,\n      validateStatus: () => true\n    };\n    if (body && typeof body !== 'string') {\n      ajaxRequestConfig.onUploadProgress = this.onProgress();\n    }\n    const response = await this.ajax.request(ajaxRequestConfig);\n    this.response = response.data;\n    this.responseHeaders = response.headers;\n    this.responseStatus = response.status;\n    if (response.status >= 400) {\n      return Promise.reject();\n    }\n  }\n\n  /**\n   * Set auth token cache\n   */\n  updateToken = async (): Promise<string | void> => {\n    this._token = await unfunc(this.token || '', this.responseStatus);\n  };\n\n  /**\n   * Get file URI\n   */\n  protected abstract getFileUrl(): Promise<string>;\n\n  /**\n   * Send file content and return an offset for the next request\n   */\n  protected abstract sendFileContent(): Promise<number | undefined>;\n\n  /**\n   * Get an offset for the next request\n   */\n  protected abstract getOffset(): Promise<number | undefined>;\n\n  protected abort(): void {\n    this.offset = undefined;\n    this.canceler.cancel();\n  }\n\n  protected async cancel(): Promise<void> {\n    this.abort();\n    if (this.url) {\n      await this.request({ method: 'DELETE' }).catch(() => {});\n    }\n    this.stateChange(this);\n  }\n\n  /**\n   * Gets the value from the response\n   */\n  protected getValueFromResponse(key: string): string | null {\n    return this.responseHeaders[key.toLowerCase()] || null;\n  }\n\n  protected getChunk(): { start: number; end: number; body: Blob } {\n    this.chunkSize = isNumber(this.options.chunkSize) ? this.chunkSize : DynamicChunk.size;\n    const start = this.offset || 0;\n    const end = Math.min(start + this.chunkSize, this.size);\n    const body = this.file.slice(this.offset, end);\n    return { start, end, body };\n  }\n\n  private cleanup = () => store.delete(this.uploadId);\n\n  private onProgress(): (evt: ProgressEvent) => void {\n    let throttle: ReturnType<typeof setTimeout> | undefined;\n    return ({ loaded }) => {\n      const now = new Date().getTime();\n      const uploaded = (this.offset as number) + loaded;\n      const elapsedTime = (now - this.startTime) / 1000;\n      this.speed = Math.round(uploaded / elapsedTime);\n      DynamicChunk.scale(this.speed);\n      if (!throttle) {\n        throttle = setTimeout(() => (throttle = undefined), 500);\n        this.progress = +((uploaded / this.size) * 100).toFixed(2);\n        this.remaining = Math.ceil((this.size - uploaded) / this.speed);\n        this.stateChange(this);\n      }\n    };\n  }\n}\n","import { Uploader } from './uploader';\nimport { b64, resolveUrl } from './utils';\n\n/**\n * Implements tus resumable upload protocol\n *\n * {@link https://github.com/tus/tus-resumable-upload-protocol/blob/master/protocol.md|Github}\n */\nexport class Tus extends Uploader {\n  headers = { 'Tus-Resumable': '1.0.0' };\n\n  async getFileUrl(): Promise<string> {\n    const encodedMetaData = b64.serialize(this.metadata);\n    const headers = {\n      'Upload-Length': `${this.size}`,\n      'Upload-Metadata': `${encodedMetaData}`\n    };\n    await this.request({ method: 'POST', url: this.endpoint, headers });\n    const location = this.getValueFromResponse('location');\n    if (!location) {\n      throw new Error('Invalid or missing Location header');\n    }\n    this.offset = this.responseStatus === 201 ? 0 : undefined;\n    return resolveUrl(location, this.endpoint);\n  }\n\n  async sendFileContent(): Promise<number | undefined> {\n    const { body } = this.getChunk();\n    const headers = {\n      'Content-Type': 'application/offset+octet-stream',\n      'Upload-Offset': `${this.offset}`\n    };\n    await this.request({ method: 'PATCH', body, headers });\n    return this.getOffsetFromResponse();\n  }\n\n  async getOffset(): Promise<number | undefined> {\n    await this.request({ method: 'HEAD' });\n    return this.getOffsetFromResponse();\n  }\n\n  protected getOffsetFromResponse(): number | undefined {\n    const offsetStr = this.getValueFromResponse('Upload-Offset');\n    return offsetStr ? parseInt(offsetStr, 10) : undefined;\n  }\n}\n","import { Uploader } from './uploader';\nimport { resolveUrl } from './utils';\n\n/**\n * Implements XHR/CORS Resumable Upload\n *\n * {@link https://github.com/kukhariev/node-uploadx/blob/master/proto.md|Github}\n * @see {@link https://developers.google.com/drive/api/v3/manage-uploads#resumable|Google Drive API documentation}\n */\nexport class UploaderX extends Uploader {\n  responseType = 'json' as 'json';\n\n  async getFileUrl(): Promise<string> {\n    const headers = {\n      'Content-Type': 'application/json; charset=utf-8',\n      'X-Upload-Content-Length': this.size.toString(),\n      'X-Upload-Content-Type': this.file.type || 'application/octet-stream'\n    };\n    await this.request({\n      method: 'POST',\n      body: JSON.stringify(this.metadata),\n      url: this.endpoint,\n      headers\n    });\n    const location = this.getValueFromResponse('location');\n    if (!location) {\n      throw new Error('Invalid or missing Location header');\n    }\n    this.offset = this.responseStatus === 201 ? 0 : undefined;\n    return resolveUrl(location, this.endpoint);\n  }\n\n  async sendFileContent(): Promise<number | undefined> {\n    const { end, body } = this.getChunk();\n    const headers = {\n      'Content-Type': 'application/octet-stream',\n      'Content-Range': `bytes ${this.offset}-${end - 1}/${this.size}`\n    };\n    await this.request({ method: 'PUT', body, headers });\n    return this.getOffsetFromResponse();\n  }\n\n  async getOffset(): Promise<number | undefined> {\n    const headers = {\n      'Content-Type': 'application/octet-stream',\n      'Content-Range': `bytes */${this.size}`\n    };\n    await this.request({ method: 'PUT', headers });\n    return this.getOffsetFromResponse();\n  }\n\n  protected getOffsetFromResponse(): number | undefined {\n    if (this.responseStatus > 201) {\n      const range = this.getValueFromResponse('Range');\n      return range ? getRangeEnd(range) + 1 : undefined;\n    }\n    return this.size;\n  }\n}\n\nexport function getRangeEnd(range = ''): number {\n  const end = parseInt(range.split(/-/)[1], 10);\n  return end >= 0 ? end : -1;\n}\n","import { InjectionToken } from '@angular/core';\nimport { AuthorizeRequest, UploaderClass, UploaderOptions } from './interfaces';\nimport { UploaderX } from './uploaderx';\n\n/**\n * Global Module Options\n */\nexport interface UploadxOptions extends UploaderOptions {\n  /**\n   * Provide a user-defined class to support another upload protocol or to extend an existing one.\n   * @defaultValue UploadX\n   */\n  uploaderClass?: UploaderClass;\n  /**\n   * Set the maximum parallel uploads\n   * @defaultValue 2\n   */\n  concurrency?: number;\n  /**\n   * Automatically start upload when files added\n   * @defaultValue true\n   */\n  autoUpload?: boolean;\n  /**\n   * File types the user can pick from the file input\n   */\n  allowedTypes?: string;\n  /**\n   * Add 'multiple' attribute\n   * @defaultValue true\n   */\n  multiple?: boolean;\n}\n\nexport interface UploadxFactoryOptions extends UploadxOptions {\n  endpoint: string;\n  autoUpload: boolean;\n  concurrency: number;\n  uploaderClass: UploaderClass;\n  authorize: AuthorizeRequest;\n}\n\nconst defaultOptions: UploadxFactoryOptions = {\n  endpoint: '/upload',\n  autoUpload: true,\n  concurrency: 2,\n  uploaderClass: UploaderX,\n  authorize: (req, token) => {\n    token && (req.headers.Authorization = `Bearer ${token}`);\n    return req;\n  }\n};\n\nexport const UPLOADX_FACTORY_OPTIONS = new InjectionToken<UploadxFactoryOptions>(\n  'uploadx.factory.options',\n  { providedIn: 'root', factory: () => defaultOptions }\n);\nexport const UPLOADX_OPTIONS = new InjectionToken<UploadxOptions>('uploadx.options');\n","import { Injectable } from '@angular/core';\nimport { Uploader } from './uploader';\nimport { createHash } from './utils';\n\nexport interface UidService {\n  generateId(uploader: Uploader): Promise<string> | string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IdService implements UidService {\n  generateId(uploader: Uploader): Promise<string> | string {\n    const print = JSON.stringify({\n      ...uploader.metadata,\n      type: uploader.constructor.name,\n      endpoint: uploader.endpoint\n    });\n    return createHash(print).toString(16);\n  }\n}\n","import { Inject, Injectable, NgZone, OnDestroy, Optional } from '@angular/core';\nimport { fromEvent, Observable, Subject, Subscription } from 'rxjs';\nimport { debounceTime, map, startWith } from 'rxjs/operators';\nimport { Ajax, AjaxRequestConfig, AjaxResponse, UPLOADX_AJAX } from './ajax';\nimport { IdService } from './id.service';\nimport { UploadState, UploadxControlEvent, Writable } from './interfaces';\nimport {\n  UPLOADX_FACTORY_OPTIONS,\n  UPLOADX_OPTIONS,\n  UploadxFactoryOptions,\n  UploadxOptions\n} from './options';\nimport { Uploader } from './uploader';\nimport { pick } from './utils';\n\nconst stateKeys: Array<keyof UploadState> = [\n  'file',\n  'name',\n  'progress',\n  'remaining',\n  'response',\n  'responseHeaders',\n  'responseStatus',\n  'size',\n  'speed',\n  'status',\n  'uploadId',\n  'url'\n];\n\nconst DUE_TIME = 5;\n\n@Injectable({ providedIn: 'root' })\nexport class UploadxService implements OnDestroy {\n  /** Upload Queue */\n  queue: Uploader[] = [];\n  options: UploadxFactoryOptions;\n  private readonly eventsStream: Subject<UploadState> = new Subject();\n  private subs: Subscription[] = [];\n\n  /** Upload status events */\n  get events(): Observable<UploadState> {\n    return this.eventsStream.asObservable();\n  }\n\n  constructor(\n    @Optional() @Inject(UPLOADX_OPTIONS) options: UploadxOptions | null,\n    @Inject(UPLOADX_FACTORY_OPTIONS) defaults: UploadxFactoryOptions,\n    @Inject(UPLOADX_AJAX) readonly ajax: Ajax,\n    private ngZone: NgZone,\n    private idService: IdService\n  ) {\n    this.options = Object.assign({}, defaults, options);\n    if (typeof window !== 'undefined') {\n      this.subs.push(\n        fromEvent(window, 'online').subscribe(() => this.control({ action: 'upload' })),\n        fromEvent(window, 'offline').subscribe(() => this.control({ action: 'pause' }))\n      );\n    }\n  }\n\n  /**\n   * Initializes service\n   * @param options global module options\n   * @returns Observable that emits a new value on progress or status changes\n   */\n  init(options: UploadxOptions = {}): Observable<UploadState> {\n    Object.assign(this.options, options);\n    return this.events;\n  }\n\n  /**\n   * Initializes service\n   * @param options global module options\n   * @returns Observable that emits the current array of uploaders\n   */\n  connect(options?: UploadxOptions): Observable<Uploader[]> {\n    return this.init(options).pipe(\n      startWith(null),\n      map(() => this.queue),\n      debounceTime(DUE_TIME)\n    );\n  }\n\n  /**\n   * Terminates all uploads and clears the queue\n   */\n  disconnect(): void {\n    this.queue.forEach(uploader => (uploader.status = 'paused'));\n    this.queue = [];\n  }\n\n  ngOnDestroy(): void {\n    this.disconnect();\n    this.subs.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Creates uploaders for files and adds them to the upload queue\n   */\n  handleFiles(files: FileList | File | File[], options = {} as UploadxOptions): void {\n    const instanceOptions: UploadxFactoryOptions = { ...this.options, ...options };\n    this.options.concurrency = instanceOptions.concurrency;\n    ('name' in files ? [files] : Array.from(files)).forEach(file =>\n      this.addUploaderInstance(file, instanceOptions)\n    );\n  }\n\n  /**\n   * Upload control\n   * @example\n   * // pause all\n   * this.uploadService.control({ action: 'pause' });\n   * // pause upload with uploadId\n   * this.uploadService.control({ action: 'pause', uploadId});\n   * // set token\n   * this.uploadService.control({ token: `TOKEN` });\n   */\n  control(evt: UploadxControlEvent): void {\n    const target = evt.uploadId\n      ? this.queue.filter(({ uploadId }) => uploadId === evt.uploadId)\n      : this.queue;\n    target.forEach(uploader => uploader.configure(evt));\n  }\n\n  /**\n   * Returns number of active uploads\n   */\n  runningProcess(): number {\n    return this.queue.filter(({ status }) => status === 'uploading' || status === 'retry').length;\n  }\n\n  /**\n   * Performs http requests\n   */\n  async request<T = string>(config: AjaxRequestConfig): Promise<AjaxResponse<T>> {\n    config.data = config.body ? config.body : config.data;\n    return this.ajax.request(config);\n  }\n\n  private stateChange = (evt: UploadState) => {\n    this.ngZone.run(() => this.eventsStream.next(pick(evt, stateKeys)));\n    if (evt.status !== 'uploading' && evt.status !== 'added') {\n      this.ngZone.runOutsideAngular(() => setTimeout(() => this.processQueue()));\n    }\n  };\n\n  private async addUploaderInstance(file: File, options: UploadxFactoryOptions): Promise<void> {\n    const uploader = new options.uploaderClass(file, options, this.stateChange, this.ajax);\n    (uploader.uploadId as Writable<string>) = await this.idService.generateId(uploader);\n    this.queue.push(uploader);\n    uploader.status = options.autoUpload && onLine() ? 'queue' : 'added';\n  }\n\n  private processQueue(): void {\n    this.queue = this.queue.filter(({ status }) => status !== 'cancelled');\n    this.queue\n      .filter(({ status }) => status === 'queue')\n      .slice(0, Math.max(this.options.concurrency - this.runningProcess(), 0))\n      .forEach(uploader => uploader.upload());\n  }\n}\n\nfunction onLine(): boolean {\n  return typeof window !== 'undefined' ? window.navigator.onLine : true;\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  Renderer2\n} from '@angular/core';\nimport { takeWhile } from 'rxjs/operators';\nimport { UploadState, UploadxControlEvent } from './interfaces';\nimport { UploadxOptions } from './options';\nimport { UploadxService } from './uploadx.service';\n\n@Directive({ selector: '[uploadx]' })\nexport class UploadxDirective implements OnInit {\n  @Input()\n  set uploadx(value: UploadxOptions | '') {\n    if (value) {\n      this.options = value;\n    }\n  }\n\n  @Input() options: UploadxOptions = {};\n\n  @Input() set control(value: UploadxControlEvent | '') {\n    if (value) {\n      this.uploadService.control(value);\n    }\n  }\n\n  @Output() state = new EventEmitter<UploadState>();\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private uploadService: UploadxService\n  ) {}\n\n  ngOnInit(): void {\n    const { multiple, allowedTypes } = this.options;\n    multiple !== false && this.renderer.setAttribute(this.elementRef.nativeElement, 'multiple', '');\n    allowedTypes &&\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'accept', allowedTypes);\n\n    this.uploadService.events\n      .pipe(takeWhile(_ => this.state.observers.length > 0))\n      .subscribe(this.state);\n  }\n\n  @HostListener('change', ['$event.target.files'])\n  fileListener(files: FileList): void {\n    if (files && files.item(0)) {\n      this.uploadService.handleFiles(files, this.options);\n    }\n  }\n}\n","import { ContentChild, Directive, HostBinding, HostListener } from '@angular/core';\nimport { UploadxDirective } from './uploadx.directive';\nimport { UploadxService } from './uploadx.service';\n\n@Directive({ selector: '[uploadxDrop]' })\nexport class UploadxDropDirective {\n  @HostBinding('class.uploadx-drop-active')\n  active = false;\n\n  @ContentChild(UploadxDirective)\n  fileInput?: UploadxDirective;\n\n  constructor(private uploadService: UploadxService) {}\n\n  @HostListener('drop', ['$event'])\n  dropHandler(event: DragEvent): void {\n    if (event.dataTransfer && event.dataTransfer.files && event.dataTransfer.files.item(0)) {\n      event.stopPropagation();\n      event.preventDefault();\n      this.active = false;\n      this.fileInput\n        ? this.fileInput.fileListener(event.dataTransfer.files)\n        : this.uploadService.handleFiles(event.dataTransfer.files);\n    }\n  }\n\n  @HostListener('dragover', ['$event'])\n  onDragOver(event: DragEvent): void {\n    if (event.dataTransfer && event.dataTransfer.files) {\n      event.dataTransfer.dropEffect = 'copy';\n      event.stopPropagation();\n      event.preventDefault();\n      this.active = true;\n    }\n  }\n\n  @HostListener('dragleave', ['$event'])\n  onDragLeave(event: DragEvent): void {\n    this.active = false;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UPLOADX_OPTIONS, UploadxOptions } from './options';\nimport { UploadxDropDirective } from './uploadx-drop.directive';\nimport { UploadxDirective } from './uploadx.directive';\n\n@NgModule({\n  declarations: [UploadxDirective, UploadxDropDirective],\n  exports: [UploadxDirective, UploadxDropDirective]\n})\nexport class UploadxModule {\n  static withConfig(options: UploadxOptions): ModuleWithProviders<UploadxModule> {\n    return {\n      ngModule: UploadxModule,\n      providers: [{ provide: UPLOADX_OPTIONS, useValue: options }]\n    };\n  }\n}\n"],"names":["tslib_1.__values","tslib_1.__extends"],"mappings":"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"}
